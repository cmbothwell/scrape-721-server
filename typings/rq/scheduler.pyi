"""
This type stub file was generated by pyright.
"""

from enum import Enum

SCHEDULER_KEY_TEMPLATE = ...
SCHEDULER_LOCKING_KEY_TEMPLATE = ...
class SchedulerStatus(str, Enum):
    STARTED = ...
    WORKING = ...
    STOPPED = ...


class RQScheduler:
    Status = SchedulerStatus
    def __init__(self, queues, connection, interval=..., logging_level=..., date_format=..., log_format=..., serializer=...) -> None:
        ...
    
    @property
    def connection(self):
        ...
    
    @property
    def acquired_locks(self): # -> set[Unknown]:
        ...
    
    @property
    def status(self): # -> SchedulerStatus:
        ...
    
    @property
    def should_reacquire_locks(self): # -> bool:
        """Returns True if lock_acquisition"""
        ...
    
    def acquire_locks(self, auto_start=...): # -> set[Unknown]:
        """Returns names of queue it succes"""
        ...
    
    def prepare_registries(self, queue_names=...): # -> None:
        """Prepare scheduled job registries"""
        ...
    
    @classmethod
    def get_locking_key(cls, name):
        """Returns scheduler key for a give"""
        ...
    
    def enqueue_scheduled_jobs(self): # -> None:
        """Enqueue jobs whose timestamp is """
        ...
    
    def request_stop(self, signum=..., frame=...): # -> None:
        """Toggle self._stop_requested that"""
        ...
    
    def heartbeat(self): # -> None:
        """Updates the TTL on scheduler key"""
        ...
    
    def stop(self): # -> None:
        ...
    
    def release_locks(self): # -> None:
        """Release acquired locks"""
        ...
    
    def start(self): # -> Process:
        ...
    
    def work(self): # -> None:
        ...
    


def run(scheduler): # -> None:
    ...

def parse_names(queues_or_names): # -> list[Unknown]:
    """Given a list of strings or queue"""
    ...

