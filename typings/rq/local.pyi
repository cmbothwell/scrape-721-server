"""
This type stub file was generated by pyright.
"""

"""
    werkzeug.local
    ~~~~~~~~"""
def release_local(local): # -> None:
    """Releases the contents of the loc"""
    ...

class Local:
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __iter__(self):
        ...
    
    def __call__(self, proxy): # -> LocalProxy:
        """Create a proxy for a name."""
        ...
    
    def __release_local__(self): # -> None:
        ...
    
    def __getattr__(self, name):
        ...
    
    def __setattr__(self, name, value): # -> None:
        ...
    
    def __delattr__(self, name): # -> None:
        ...
    


class LocalStack:
    """This class works similar to a :c"""
    def __init__(self) -> None:
        ...
    
    def __release_local__(self): # -> None:
        ...
    
    __ident_func__ = ...
    def __call__(self): # -> LocalProxy:
        ...
    
    def push(self, obj): # -> Any | list[Unknown]:
        """Pushes a new item to the stack"""
        ...
    
    def pop(self): # -> Any | None:
        """Removes the topmost item from th"""
        ...
    
    @property
    def top(self): # -> None:
        """The topmost item on the stack.  """
        ...
    
    def __len__(self): # -> int:
        ...
    


class LocalManager:
    """Local objects cannot manage them"""
    def __init__(self, locals=..., ident_func=...) -> None:
        ...
    
    def get_ident(self): # -> int:
        """Return the context identifier th"""
        ...
    
    def cleanup(self): # -> None:
        """Manually clean up the data in th"""
        ...
    
    def __repr__(self): # -> str:
        ...
    


class LocalProxy:
    """Acts as a proxy for a werkzeug l"""
    __slots__ = ...
    def __init__(self, local, name=...) -> None:
        ...
    
    @property
    def __dict__(self): # -> Any:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __nonzero__(self): # -> bool:
        ...
    
    def __unicode__(self): # -> str:
        ...
    
    def __dir__(self): # -> list[str]:
        ...
    
    def __getattr__(self, name): # -> list[str] | Any:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __setslice__(self, i, j, seq): # -> None:
        ...
    
    def __delslice__(self, i, j): # -> None:
        ...
    
    __setattr__ = ...
    __delattr__ = ...
    __str__ = ...
    __lt__ = ...
    __le__ = ...
    __eq__ = ...
    __ne__ = ...
    __gt__ = ...
    __ge__ = ...
    __cmp__ = ...
    __hash__ = ...
    __call__ = ...
    __len__ = ...
    __getitem__ = ...
    __iter__ = ...
    __contains__ = ...
    __getslice__ = ...
    __add__ = ...
    __sub__ = ...
    __mul__ = ...
    __floordiv__ = ...
    __mod__ = ...
    __divmod__ = ...
    __pow__ = ...
    __lshift__ = ...
    __rshift__ = ...
    __and__ = ...
    __xor__ = ...
    __or__ = ...
    __div__ = ...
    __truediv__ = ...
    __neg__ = ...
    __pos__ = ...
    __abs__ = ...
    __invert__ = ...
    __complex__ = ...
    __int__ = ...
    __long__ = ...
    __float__ = ...
    __oct__ = ...
    __hex__ = ...
    __index__ = ...
    __coerce__ = ...
    __enter__ = ...
    __exit__ = ...


