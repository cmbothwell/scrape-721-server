"""
This type stub file was generated by pyright.
"""

from enum import Enum
from .timeouts import UnixSignalDeathPenalty

green = ...
yellow = ...
blue = ...
logger = ...
class StopRequested(Exception):
    ...


def compact(l): # -> list[Unknown]:
    ...

_signames = ...
def signal_name(signum): # -> str:
    ...

class WorkerStatus(str, Enum):
    STARTED = ...
    SUSPENDED = ...
    BUSY = ...
    IDLE = ...


class Worker:
    redis_worker_namespace_prefix = ...
    redis_workers_keys = ...
    death_penalty_class = UnixSignalDeathPenalty
    queue_class = ...
    job_class = ...
    log_result_lifespan = ...
    log_job_description = ...
    exponential_backoff_factor = ...
    max_connection_wait_time = ...
    @classmethod
    def all(cls, connection=..., job_class=..., queue_class=..., queue=..., serializer=...): # -> list[Worker]:
        """Returns an iterable of all Worke"""
        ...
    
    @classmethod
    def all_keys(cls, connection=..., queue=...): # -> list[str | None]:
        ...
    
    @classmethod
    def count(cls, connection=..., queue=...): # -> int:
        """Returns the number of workers by"""
        ...
    
    @classmethod
    def find_by_key(cls, worker_key, connection=..., job_class=..., queue_class=..., serializer=...): # -> Self@Worker | None:
        """Returns a Worker instance, based"""
        ...
    
    def __init__(self, queues, name=..., default_result_ttl=..., connection=..., exc_handler=..., exception_handlers=..., default_worker_ttl=..., job_class=..., queue_class=..., log_job_description=..., job_monitoring_interval=..., disable_default_exception_handler=..., prepare_for_work=..., serializer=...) -> None:
        ...
    
    def get_redis_server_version(self): # -> tuple[int, ...] | tuple[Literal[5], Literal[0], Literal[9]]:
        """Return Redis server version of c"""
        ...
    
    def validate_queues(self): # -> None:
        """Sanity check for the given queue"""
        ...
    
    def queue_names(self): # -> list[Any | Unknown | str]:
        """Returns the queue names of this """
        ...
    
    def queue_keys(self): # -> list[Any | Unknown | str]:
        """Returns the Redis keys represent"""
        ...
    
    @property
    def key(self): # -> str:
        """Returns the worker's Redis hash """
        ...
    
    @property
    def pubsub_channel_name(self): # -> str:
        """Returns the worker's Redis hash """
        ...
    
    @property
    def horse_pid(self): # -> int:
        """The horse's process ID.  Only av"""
        ...
    
    @property
    def is_horse(self): # -> bool:
        """Returns whether or not this is t"""
        ...
    
    def procline(self, message): # -> None:
        """Changes the current procname for"""
        ...
    
    def register_birth(self): # -> None:
        """Registers its own birth."""
        ...
    
    def register_death(self): # -> None:
        """Registers its own death."""
        ...
    
    def set_shutdown_requested_date(self): # -> None:
        """Sets the date on which the worke"""
        ...
    
    @property
    def shutdown_requested_date(self): # -> datetime | None:
        """Fetches shutdown_requested_date """
        ...
    
    @property
    def death_date(self): # -> datetime | None:
        """Fetches death date from Redis."""
        ...
    
    def set_state(self, state, pipeline=...): # -> None:
        ...
    
    def get_state(self): # -> str | None:
        ...
    
    state = ...
    def set_current_job_working_time(self, current_job_working_time, pipeline=...): # -> None:
        ...
    
    def set_current_job_id(self, job_id, pipeline=...): # -> None:
        ...
    
    def get_current_job_id(self, pipeline=...): # -> str | None:
        ...
    
    def get_current_job(self): # -> Job | Any | None:
        """Returns the job id of the curren"""
        ...
    
    def kill_horse(self, sig=...): # -> None:
        """
        Kill the horse but catc"""
        ...
    
    def wait_for_horse(self): # -> tuple[int | None, int | None]:
        """
        A waiting the end of th"""
        ...
    
    def request_force_stop(self, signum, frame):
        """Terminates the application (cold"""
        ...
    
    def request_stop(self, signum, frame): # -> None:
        """Stops the current worker loop bu"""
        ...
    
    def handle_warm_shutdown_request(self): # -> None:
        ...
    
    def check_for_suspension(self, burst): # -> None:
        """Check to see if workers have bee"""
        ...
    
    def run_maintenance_tasks(self): # -> None:
        """
        Runs periodic maintenan"""
        ...
    
    def subscribe(self): # -> None:
        """Subscribe to this worker's chann"""
        ...
    
    def unsubscribe(self): # -> None:
        """Unsubscribe from pubsub channel"""
        ...
    
    def reorder_queues(self, reference_queue): # -> None:
        ...
    
    def work(self, burst=..., logging_level=..., date_format=..., log_format=..., max_jobs=..., with_scheduler=...):
        """Starts the work loop.

        P"""
        ...
    
    def stop_scheduler(self): # -> None:
        """Ensure scheduler process is stop"""
        ...
    
    def dequeue_job_and_maintain_ttl(self, timeout):
        ...
    
    def heartbeat(self, timeout=..., pipeline=...): # -> None:
        """Specifies a new worker timeout, """
        ...
    
    def refresh(self): # -> None:
        ...
    
    def increment_failed_job_count(self, pipeline=...): # -> None:
        ...
    
    def increment_successful_job_count(self, pipeline=...): # -> None:
        ...
    
    def increment_total_working_time(self, job_execution_time, pipeline): # -> None:
        ...
    
    def fork_work_horse(self, job, queue): # -> None:
        """Spawns a work horse to perform t"""
        ...
    
    def get_heartbeat_ttl(self, job):
        ...
    
    def monitor_work_horse(self, job, queue):
        """The worker will monitor the work"""
        ...
    
    def execute_job(self, job, queue): # -> None:
        """Spawns a work horse to perform t"""
        ...
    
    def maintain_heartbeats(self, job): # -> None:
        """Updates worker and job's last he"""
        ...
    
    def main_work_horse(self, job, queue):
        """This is the entry point of the n"""
        ...
    
    def setup_work_horse_signals(self): # -> None:
        """Setup signal handing for the new"""
        ...
    
    def prepare_job_execution(self, job): # -> None:
        """Performs misc bookkeeping like u"""
        ...
    
    def handle_job_failure(self, job, queue, started_job_registry=..., exc_string=...):
        """Handles the failure or an execut"""
        ...
    
    def handle_job_success(self, job, queue, started_job_registry):
        ...
    
    def execute_success_callback(self, job, result): # -> None:
        """Executes success_callback with t"""
        ...
    
    def execute_failure_callback(self, job): # -> None:
        """Executes failure_callback with t"""
        ...
    
    def perform_job(self, job, queue):
        """Performs the actual work of a jo"""
        ...
    
    def handle_exception(self, job, *exc_info): # -> None:
        """Walks the exception handler stac"""
        ...
    
    def push_exc_handler(self, handler_func): # -> None:
        """Pushes an exception handler onto"""
        ...
    
    def pop_exc_handler(self):
        """Pops the latest exception handle"""
        ...
    
    def __eq__(self, other) -> bool:
        """Equality does not take the datab"""
        ...
    
    def __hash__(self) -> int:
        """The hash does not take the datab"""
        ...
    
    def clean_registries(self): # -> None:
        """Runs maintenance jobs on each Qu"""
        ...
    
    @property
    def should_run_maintenance_tasks(self): # -> bool:
        """Maintenance tasks should run on """
        ...
    
    def handle_payload(self, message): # -> None:
        """Handle external commands"""
        ...
    


class SimpleWorker(Worker):
    def execute_job(self, job, queue):
        """Execute job in same thread/proce"""
        ...
    
    def get_heartbeat_ttl(self, job): # -> int:
        ...
    


class HerokuWorker(Worker):
    """
    Modified version of rq work"""
    imminent_shutdown_delay = ...
    frame_properties = ...
    def setup_work_horse_signals(self): # -> None:
        """Modified to ignore SIGINT and SI"""
        ...
    
    def handle_warm_shutdown_request(self): # -> None:
        """If horse is alive send it SIGRTM"""
        ...
    
    def request_stop_sigrtmin(self, signum, frame): # -> None:
        ...
    
    def request_force_stop_sigrtmin(self, signum, frame):
        ...
    


class RoundRobinWorker(Worker):
    """
    Modified version of Worker """
    def reorder_queues(self, reference_queue): # -> None:
        ...
    


class RandomWorker(Worker):
    """
    Modified version of Worker """
    def reorder_queues(self, reference_queue): # -> None:
        ...
    


